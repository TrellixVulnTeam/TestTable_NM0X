{"ast":null,"code":"import { of } from \"rxjs\";\nimport { tap } from 'rxjs/operators';\nimport { HttpResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./table-data-service.service\";\nexport let Interceptor = /*#__PURE__*/(() => {\n  class Interceptor {\n    constructor(tableDataService) {\n      this.tableDataService = tableDataService;\n    }\n\n    intercept(req, next) {\n      const authReq = req.clone({});\n      const dataCashed = this.tableDataService.getDataCached();\n      const cachedResponse = new HttpResponse({\n        status: 200,\n        body: dataCashed\n      });\n\n      if (dataCashed) {\n        this.tableDataService.recordDataCashed(dataCashed.result = req.body);\n        return of(cachedResponse.clone());\n      } else {\n        return next.handle(authReq).pipe(tap(event => {\n          const value = event.body;\n          this.tableDataService.recordDataCashed(value);\n        }));\n      }\n    }\n\n  }\n\n  Interceptor.ɵfac = function Interceptor_Factory(t) {\n    return new (t || Interceptor)(i0.ɵɵinject(i1.TableDataService));\n  };\n\n  Interceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Interceptor,\n    factory: Interceptor.ɵfac\n  });\n  return Interceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}